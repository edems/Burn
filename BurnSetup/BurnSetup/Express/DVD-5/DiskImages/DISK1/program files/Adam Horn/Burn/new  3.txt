    #include <xc.h>
    #pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
    #pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
    #pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

    // CONFIG1H
    #pragma config FOSC = XTPLL_XT  // Oscillator Selection bits (XT oscillator, PLL enabled (XTPLL))
    #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
    #pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

    // CONFIG2L
    #pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
    #pragma config BOR = ON         // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
    #pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting)
    #pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

    // CONFIG2H
    #pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
    #pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

    // CONFIG3H
    #pragma config CCP2MX = OFF      // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
    #pragma config PBADEN = ON     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
    #pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
    #pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

    // CONFIG4L
    #pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
    #pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
    #pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

    // CONFIG5L
    #pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
    #pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
    #pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
    #pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

    // CONFIG5H
    #pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
    #pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

    // CONFIG6L
    #pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
    #pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
    #pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
    #pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

    // CONFIG6H
    #pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
    #pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
    #pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

    // CONFIG7L
    #pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
    #pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
    #pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
    #pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

    // CONFIG7H
    #pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

    void init();
    static volatile unsigned short temp2=0,temp=0,sub_wert=0,v1=0,v2=0,timer3=0,l=0,i=0,feuer=0;
    static volatile unsigned char rising_edge2=0,rising_edge1=0,wert=0,decr_wert=0;
    static volatile unsigned int timer_high[6] =
    {
        0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000
    };

    static volatile unsigned int timer_low[8] =
    {
        0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000
    };

    static volatile unsigned int lookup[256] = {
    0x0000,
0x017F,
0x023F,
0x02FF,
0x03BF,
0x047F,
0x053F,
0x05FF,
0x06BF,
0x077F,
0x083F,
0x08FF,
0x09BF,
0x0A7F,
0x0B3F,
0x0BFF,
0x0CBF,
0x0D7F,
0x0E3F,
0x0EFF,
0x0FBF,
0x10BE,
0x11C2,
0x12CC,
0x13B8,
0x14CC,
0x15BF,
0x16B5,
0x17AE,
0x18AA,
0x19A8,
0x1AAA,
0x1BAE,
0x1CB5,
0x1DBF,
0x1ECC,
0x1FA7,
0x20B8,
0x2194,
0x22AA,
0x23C2,
0x24A1,
0x25BE,
0x269E,
0x277F,
0x28A1,
0x2983,
0x2AAA,
0x2B8D,
0x2C71,
0x2D9D,
0x2E82,
0x2F67,
0x304C,
0x317F,
0x3266,
0x334C,
0x3432,
0x356D,
0x3654,
0x373C,
0x3824,
0x3965,
0x3A4F,
0x3B38,
0x3C21,
0x3D0A,
0x3E54,
0x3F3F,
0x402A,
0x4114,
0x41FF,
0x42EA,
0x443E,
0x452A,
0x4616,
0x4702,
0x47EE,
0x48DA,
0x49C6,
0x4AB2,
0x4C13,
0x4D00,
0x4DEE,
0x4EDC,
0x4FC9,
0x50B7,
0x51A4,
0x5292,
0x537F,
0x54EE,
0x55DD,
0x56CC,
0x57BB,
0x58AA,
0x5999,
0x5A88,
0x5B77,
0x5C65,
0x5D54,
0x5E43,
0x5FC3,
0x60B4,
0x61A4,
0x6294,
0x6385,
0x6475,
0x6565,
0x6656,
0x6746,
0x6837,
0x6927,
0x6A17,
0x6B08,
0x6C9C,
0x6D8D,
0x6E7F,
0x6F71,
0x7063,
0x7154,
0x7246,
0x7338,
0x742A,
0x751C,
0x760D,
0x76FF,
0x77F1,
0x78E3,
0x79D4,
0x7AC6,
0x7C72,
0x7D65,
0x7E59,
0x7F4C,
0x803F,
0x8132,
0x8225,
0x8319,
0x840C,
0x84FF,
0x85F2,
0x86E5,
0x87D9,
0x88CC,
0x89BF,
0x8AB2,
0x8BA5,
0x8C99,
0x8D8C,
0x8E7F,
0x8F72,
0x9065,
0x9232,
0x9327,
0x941B,
0x9510,
0x9605,
0x96F9,
0x97EE,
0x98E3,
0x99D7,
0x9ACC,
0x9BC0,
0x9CB5,
0x9DAA,
0x9E9E,
0x9F93,
0xA088,
0xA17C,
0xA271,
0xA365,
0xA45A,
0xA54F,
0xA643,
0xA738,
0xA82D,
0xA921,
0xAA16,
0xAB0A,
0xABFF,
0xACF4,
0xAEEB,
0xAFE1,
0xB0D7,
0xB1CD,
0xB2C3,
0xB3B9,
0xB4AF,
0xB5A5,
0xB69B,
0xB792,
0xB888,
0xB97E,
0xBA74,
0xBB6A,
0xBC60,
0xBD56,
0xBE4C,
0xBF42,
0xC038,
0xC12E,
0xC224,
0xC31A,
0xC410,
0xC506,
0xC5FC,
0xC6F2,
0xC7E8,
0xC8DE,
0xC9D4,
0xCACA,
0xCBC0,
0xCCB7,
0xCDAD,
0xCEA3,
0xCF99,
0xD08F,
0xD185,
0xD27B,
0xD371,
0xD467,
0xD55D,
0xD653,
0xD749,
0xD83F,
0xD935,
0xDB6E,
0xDC65,
0xDD5D,
0xDE54,
0xDF4C,
0xE043,
0xE13B,
0xE232,
0xE32A,
0xE421,
0xE519,
0xE610,
0xE708,
0xE7FF,
0xE8F6,
0xE9EE,
0xEAE5,
0xEBDD,
0xECD4,
0xEDCC,
0xEEC3,
0xEFBB,
0xF0B2,
0xF1AA,
0xF2A1,
0xF399,
0xF490,
0xF588,
0xF67F,
0xF777
    };
//static volatile unsigned int wertig[40] = {
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000
//};
    void interrupt tc_clrHigh(void) {

        if(PIR1bits.TMR1IF == 1)
            {
                PORTBbits.RB0 = 0;
                feuer = 0;
                CCPR2L=0xf0;
                CCPR2H=0xff;
                TMR1H=0;
                TMR1L=0;
                PIR1bits.CCP1IF = 0;
                PIR1bits.TMR1IF = 0;
            }

            if(PIR1bits.CCP1IF == 1 )
            {
//                PORTBbits.RB0 = 0;
                feuer = 1;
                TMR1H=0;
                TMR1L=0;
                timer_low[7] = timer_low[6];
                timer_low[6] = timer_low[5];
                timer_low[5] = timer_low[4];
                timer_low[4] = timer_low[3];
                timer_low[3] = timer_low[2];
                timer_low[2] = timer_low[1];
                timer_low[1] = timer_low[0];

                temp=timer_high[2];
                timer_high[5] = timer_high[4];
                timer_high[4] = timer_high[3];
                timer_high[3] = timer_high[2];
                timer_high[2] = timer_high[1];
                timer_high[1] = timer_high[0];
                timer_low[0]=temp;
                timer_high[0]=CCPR1H;
                for(i=0; i<8; ++i)
                {
                    temp2=timer_high[i];
                    timer3+=temp2<<2;
                }
                for(i=0; i<6; ++i)
                {
                    temp2=timer_low[i];
                    timer3+=temp2;
                }
                timer3 = timer3 >> 5;
                sub_wert = lookup[timer3];
//                wertig[l]=sub_wert;
//                l++;

                CCPR2L=sub_wert;
                CCPR2H=sub_wert>>8;
                timer3=0;
                PIR1bits.CCP1IF = 0;
                PORTBbits.RB0 = 0;
//                if(l>0x29)
//                    l=0;

            }
//    rising_edge2=rising_edge1;
//    rising_edge1=PORTCbits.RC2;
//
//        if((rising_edge1 == 1) && (rising_edge2 == 0))
//        {
//            if(PIR1bits.TMR1IF == 1)
//            {
//                feuer = 1;
//                CCPR2L=0xf0;
//                CCPR2H=0xff;
//                TMR1H=0;
//                TMR1L=0;
//                PIR1bits.CCP1IF = 0;
//                PIR1bits.TMR1IF = 0;
//            }
//
//            if(PIR1bits.CCP1IF == 1 )
//            {
////                PORTBbits.RB0 = 0;
//                feuer = 1;
//                TMR1H=0;
//                TMR1L=0;
////                timer_low[7]=timer_low[6];
////                timer_low[6]=timer_low[5];
////                timer_low[5] = timer_low[4];
//                timer_low[4] = timer_low[3];
//                timer_low[3] = timer_low[2];
//                timer_low[2] = timer_low[1];
//                timer_low[1] = timer_low[0];
//
//                temp=timer_high[2];
////                timer_high[5] = timer_high[4];
////                timer_high[4] = timer_high[3];
////                timer_high[3] = timer_high[2];
//                timer_high[2] = timer_high[1];
//                timer_high[1] = timer_high[0];
//                timer_low[0]=temp;
//                timer_high[0]=CCPR1H;
//                for(i=0; i<4; ++i)
//                {
//                    temp2=timer_high[i];
//                    timer3+=temp2<<2;
//                }
//                for(i=0; i<3; ++i)
//                {
//                    temp2=timer_low[i];
//                    timer3+=temp2;
//                }
//                timer3 = timer3 >> 5;
//                sub_wert = lookup[timer3];
////                wertig[l]=sub_wert;
////                l++;
//
//                CCPR2L=sub_wert;
//                CCPR2H=sub_wert>>8;
//                timer3=0;
//                PIR1bits.CCP1IF = 0;
////                if(l>0x29)
////                    l=0;
//
//            }
//        }
//
//        if((rising_edge1 == 0) && (rising_edge2 == 1))
//        {
//            PORTBbits.RB0 = 0;
//        }

        if(PIR2bits.CCP2IF == 1 && feuer == 1)
        {
            PORTBbits.RB0 = 1;
            feuer =0;
            PIR2bits.CCP2IF = 0;
        }

    }
     void main(void)
     {
       init();
    CCPR2L=0xff;
    CCPR2H=0xff;
      ei();

    while(1)
        {

       }//end while
     }//end main



    void  init()
    {
       TRISB = 0xFE;
       PORTB = 0x00;
       TRISA = 0xBF;
       TRISC = 0xFF;
       LATA =  0x00;
       LATC =  0x00;
       OSCCONbits.IRCF2 = 0;
       OSCCONbits.IRCF1 = 0;
       OSCCONbits.IRCF0 = 0;
       TMR1L = 0x00;
       TMR1H = 0x00;
       TMR3L = 0x00;
       TMR3H = 0x00;
       TRISCbits.TRISC2 = 1;
       CCP1CON = 0b00000101;
       CCP2CON = 0b00001010;
       T1CON =  0b00111101;
       T3CON =  0b00110100;
       T0CON = 0x00;
       RCONbits.IPEN = 1;
       INTCON = 0x40;
       PIE1 = 0b00000101;
       IPR1 = 0b00000101;
       IPR2 = 0x01;
       PIE2 = 0x01;
//       IPR2 = 0x00;
//       PIE2 = 0x00;
       INTCON2 = 0xf0;
       INTCON3 = 0x00;
       ADCON1 = 0x0f;
    }



