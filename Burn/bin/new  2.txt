    #include <xc.h>
// CONFIG1L
#pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = INTOSC_HS // Oscillator Selection bits (Internal oscillator, HS oscillator used by USB (INTHS))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF         // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = OFF     // CCP2 MUX bit (CCP2 input/output is multiplexed with RB3)
#pragma config PBADEN = OFF      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = OFF      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF       // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

    void init();
    static volatile unsigned short temp2=0,temp=0,sub_wert=0,v1=0,v2=0,timer3=0,l=0,i=0,feuer=0,runter=0,ccptimer=0,pdown=0;
    static volatile unsigned char rising_edge2=0,rising_edge1=0,wert=0,decr_wert=0;
    static volatile unsigned int timer_high[6] =
    {
        0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000
    };

    static volatile unsigned int timer_low[8] =
    {
        0x0000,0x0000,0x0000,0x0000,
        0x0000,0x0000,0x0000,0x0000
    };

    static volatile unsigned int lookup[256] = {
0x0000,
0x0100,
0x0180,
0x0200,
0x0280,
0x02FF,
0x0380,
0x03FF,
0x0480,
0x0500,
0x0580,
0x0600,
0x0680,
0x06FF,
0x0780,
0x0800,
0x0880,
0x0900,
0x0980,
0x0A00,
0x0A80,
0x0AFF,
0x0B80,
0x0C00,
0x0C80,
0x0D00,
0x0E19,
0x0EEE,
0x101C,
0x10FF,
0x11E9,
0x12D8,
0x142A,
0x1527,
0x162A,
0x16CC,
0x17D8,
0x18E9,
0x19FF,
0x1B1C,
0x1BC9,
0x1CEE,
0x1E19,
0x1ECC,
0x1FFF,
0x2138,
0x21F1,
0x2332,
0x23EE,
0x2538,
0x25F7,
0x26B5,
0x280B,
0x28CC,
0x2A2A,
0x2AEE,
0x2BB2,
0x2D1C,
0x2DE3,
0x2EAA,
0x301E,
0x30E8,
0x31B2,
0x327C,
0x33FF,
0x34CC,
0x3599,
0x3666,
0x3732,
0x38C6,
0x3996,
0x3A66,
0x3B35,
0x3C05,
0x3DAA,
0x3E7C,
0x3F4F,
0x4021,
0x40F4,
0x41C6,
0x4299,
0x4454,
0x452A,
0x45FF,
0x46D4,
0x47AA,
0x487F,
0x4954,
0x4A2A,
0x4BFF,
0x4CD7,
0x4DB0,
0x4E88,
0x4F60,
0x5038,
0x5110,
0x51E8,
0x52C1,
0x54B2,
0x558D,
0x5668,
0x5743,
0x581E,
0x58F9,
0x59D4,
0x5AAF,
0x5B8B,
0x5C66,
0x5D41,
0x5E1C,
0x6032,
0x6110,
0x61EE,
0x62CC,
0x63AA,
0x6488,
0x6566,
0x6643,
0x6721,
0x67FF,
0x68DD,
0x69BB,
0x6A99,
0x6B77,
0x6DB8,
0x6E99,
0x6F79,
0x705A,
0x713B,
0x721C,
0x72FC,
0x73DD,
0x74BE,
0x759E,
0x767F,
0x7760,
0x7841,
0x7921,
0x7A02,
0x7AE3,
0x7BC3,
0x7CA4,
0x7D85,
0x7E66,
0x80E3,
0x81C6,
0x82AA,
0x838D,
0x8471,
0x8554,
0x8638,
0x871C,
0x87FF,
0x88E3,
0x89C6,
0x8AAA,
0x8B8D,
0x8C71,
0x8D54,
0x8E38,
0x8F1C,
0x8FFF,
0x90E3,
0x91C6,
0x92AA,
0x938D,
0x9471,
0x9732,
0x9819,
0x98FF,
0x99E6,
0x9ACC,
0x9BB2,
0x9C99,
0x9D7F,
0x9E66,
0x9F4C,
0xA032,
0xA119,
0xA1FF,
0xA2E6,
0xA3CC,
0xA4B2,
0xA599,
0xA67F,
0xA766,
0xA84C,
0xA932,
0xAA19,
0xAAFF,
0xABE6,
0xACCC,
0xADB2,
0xAE99,
0xAF7F,
0xB293,
0xB37C,
0xB465,
0xB54F,
0xB638,
0xB721,
0xB80A,
0xB8F4,
0xB9DD,
0xBAC6,
0xBBAF,
0xBC99,
0xBD82,
0xBE6B,
0xBF54,
0xC03E,
0xC127,
0xC210,
0xC2F9,
0xC3E3,
0xC4CC,
0xC5B5,
0xC69E,
0xC788,
0xC871,
0xC95A,
0xCA43,
0xCB2D,
0xCC16,
0xCCFF,
0xCDE8,
0xCED2,
0xCFBB,
0xD0A4,
0xD18D,
0xD277,
0xD360,
0xD449,
0xD532,
0xD8B8,
0xD9A4,
0xDA90,
0xDB7C,
0xDC68,
0xDD54,
0xDE40,
0xDF2D,
0xE019,
0xE105,
0xE1F1,
0xE2DD,
0xE3C9,
0xE4B5,
0xE5A1,
0xE68D,
0xE779,
0xE865,
0xE952,
0xEA3E,
0xEB2A,
0xEC16
    };
//static volatile unsigned int wertig[40] = {
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000,
//0x0000,0x0000,0x0000,0x0000
//};
    void interrupt tc_clrHigh(void) {

//        if(INTCONbits.TMR0IF == 1)
//        {
//            TMR0L = 0x00;
//            TMR0H = 0x00;
//            T0CONbits.TMR0ON = 0;
//            INTCONbits.TMR0IE = 0;
//            PORTBbits.RB0 = 0;
//            INTCONbits.TMR0IF = 0;
//        }

        if(PIR1bits.TMR1IF == 1)
            {
                TMR1H=0;
                TMR1L=0;
                PIR1bits.TMR1IF = 0;
                pdown=0;
            }

            if(PIR1bits.CCP1IF == 1 )
            {
                if(pdown == 1)
                {
                    feuer = 1;
                    TMR1H=0;
                    TMR1L=0;

                    timer_low[7] = timer_low[6];
                    timer_low[6] = timer_low[5];
                    timer_low[5] = timer_low[4];
                    timer_low[4] = timer_low[3];
                    timer_low[3] = timer_low[2];
                    timer_low[2] = timer_low[1];
                    timer_low[1] = timer_low[0];

                    temp=timer_high[2];
                    timer_high[5] = timer_high[4];
                    timer_high[4] = timer_high[3];
                    timer_high[3] = timer_high[2];
                    timer_high[2] = timer_high[1];
                    timer_high[1] = timer_high[0];
                    timer_low[0]=temp;
                    timer_high[0]=CCPR1H;
                    for(i=0; i<8; ++i)
                    {
                        temp2=timer_high[i];
                        timer3+=temp2<<2;
                    }
                    for(i=0; i<6; ++i)
                    {
                        temp2=timer_low[i];
                        timer3+=temp2;
                    }
                    timer3 = timer3 >> 5;
                    sub_wert = lookup[timer3];
                    CCPR2L=sub_wert;
                    CCPR2H=sub_wert>>8;
                    timer3=0;

                    ccptimer = CCPR1H;
                    if(ccptimer < 0x0f)
                    {
                        ccptimer = 0x00;
                        runter=0;
                        PORTBbits.RB0 = 0;
                    }
                    else
                    {
                        ccptimer = ccptimer >> 2;
                        runter = 1;
                    }
                }
                else
                {
                    pdown = 1;
                }

                PIR1bits.CCP1IF = 0;
            }


        if(PIR2bits.CCP2IF == 1 && feuer == 1)
        {
            PORTBbits.RB0 = 1;
            feuer =0;
            PIR2bits.CCP2IF = 0;
        }

    }
     void main(void)
     {
       init();
    CCPR2L=0xf0;
    CCPR2H=0xf0;
//
    ei();

    while(1)
        {
            if(TMR1H == ccptimer && runter == 1)
                PORTBbits.RB0 = 0;
        }//end while
     }//end main



    void  init()
    {
       TRISB = 0xFE;
       PORTB = 0x00;
       TRISA = 0xBF;
       TRISC = 0xFF;
       LATA =  0x00;
       LATC =  0x00;
       OSCCONbits.IRCF2 = 1;
       OSCCONbits.IRCF1 = 1;
       OSCCONbits.IRCF0 = 1;
       TMR0L = 0x00;
       TMR0H = 0x00;
       TMR1L = 0x00;
       TMR1H = 0x00;
       TMR3L = 0x00;
       TMR3H = 0x00;
       TRISCbits.TRISC2 = 1;
       CCP1CON = 0b00000101;
       CCP2CON = 0b00001010;
       T1CON =  0b00001101;
       T3CON =  0b00110100;
       T0CON = 0x00;
       RCONbits.IPEN = 1;
       INTCON = 0x00;
       INTCONbits.PEIE = 1;
       PIE1 = 0b00000101;
       IPR1 = 0b00000101;
       IPR2 = 0x01;
       PIE2 = 0x01;
       INTCON2 = 0xf0;
       INTCON3 = 0x00;
    }



